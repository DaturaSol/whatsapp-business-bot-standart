import json
from logging import getLogger
from aiohttp import ClientSession
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm.attributes import flag_modified

from app.data_base.db_helper.crud import get_user
from app.scripiter import ScriptBlueprint, ScriptBaseModel, ScripterDocName
from app.client_session.services.genai import get_ai_response

# --- WebHook ---
from app.routes.webhook.models.contacts import Contact
from app.routes.webhook.models.messages.list import ListMessageMessage
from app.routes.webhook.models.messages.nfm_reply import NfmReplyMessage
from app.routes.webhook.models.messages.button import ButtonMessageMessage
from app.routes.webhook.models.messages.text import TextMessage as TextMessageWeb

# -- Client Session ---
from app.client_session.messages.models.text import TextMessage
from app.client_session.messages.models.template import TemplateMessage
from app.client_session.messages.models.interactive_list import InteractiveListMessage
from app.client_session.messages.models.button import InteractiveButtonMessage
from app.client_session.messages.models.cta_url_button import CTAUrlButtonMessage
from app.client_session.messages.models.document import DocumentMessage


log = getLogger(__name__)

unasus_bp = ScriptBlueprint()
unasus_doc = ScripterDocName()

# --- Menu ---
@unasus_doc.register()
@unasus_bp.register()
class UnaSusMenu(ScriptBaseModel):
    """Menu for UnaSUS content also refered as PNSPIPN,
    here users can choose between chapeters and exercises on this
    content."""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id

        header = "M√≥dulo"
        body = (
            "Pol√≠tica Nacional de Sa√∫de Integral da Popula√ß√£o (PNSIPN) üìñ\n\n"
            
            "Ol√°! Bem-vindo(a) ao m√≥dulo sobre a Pol√≠tica Nacional de Sa√∫de "
            "Integral da Popula√ß√£o (PNSIPN). üåü\n\n"
            
            "Aqui, vamos explorar o conte√∫do detalhado referente a esta importante "
            "pol√≠tica, cuidadosamente elaborado pelo Professor Hilton P. Silva.\n\n"
            
            "Neste espa√ßo, voc√™ poder√° escolher como deseja interagir com o material:\n\n"
            
            "1. *Explorar os Cap√≠tulos* üìö:\n"
            "Navegue pelo conte√∫do de forma progressiva, lendo cada se√ß√£o para um aprendizado completo e sequencial.\n\n"
            
            "2. *Praticar com Exerc√≠cios* ‚úçÔ∏è:\n"
            "Teste seus conhecimentos respondendo a perguntas sobre os temas abordados. "
            "Voc√™ pode fazer os exerc√≠cios conforme avan√ßa nos cap√≠tulos ou quando se sentir pronto(a) para revisar.\n\n"
            
            "O que voc√™ gostaria de fazer primeiro? Acessar os Cap√≠tulos ou ir para os Exerc√≠cios? üòä"
        )
        options = {
            "title": "Menu",
            "rows": [
                {"title": "Cap√≠tulos", "id": UnaSusChapterMenu.__name__},
                {"title": "Exerc√≠cios", "id": UnaSusExerciseMenu.__name__},
                {"title": "Bibliografia", "id": UnaSusBib.__name__},
            ],
        }

        message = InteractiveListMessage(to=wa_id, button_name="Op√ß√µes", body_text=body)
        message.add_header(header)
        message.add_section(options)

        await message.send(self.client_session)

        self.next = "Redirecter"
        user = await get_user(self.db_session, wa_id)
        if not user:
            return
        user.current_step = self.next
        await self.db_session.commit()


# --- Chapters ---
@unasus_doc.register()
@unasus_bp.register()
class UnaSusChapterMenu(ScriptBaseModel):
    """Menu conteining all chapters for UnaSus content on
    Pol√≠tica Nacional de Sa√∫de Integral da Popula√ß√£o"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id

        header = "Navegando pelos Cap√≠tulos - PNSIPN"
        body = (
            "√ìtima escolha! Voc√™ est√° na se√ß√£o de Cap√≠tulos do m√≥dulo sobre "
            "a Pol√≠tica Nacional de Sa√∫de Integral da Popula√ß√£o (PNSIPN). üòä\n\n"
            
            "Aqui voc√™ tem algumas op√ß√µes para sua leitura:\n\n"
            
            "1. *Escolher um cap√≠tulo espec√≠fico*:\n"
            "Ideal se voc√™ quer ir direto para um t√≥pico de interesse ou revisar algo em particular. üîé\n\n"
            
            "2. *Continuar a leitura de onde parou*:\n"
            "Retome seus estudos exatamente do ponto em que voc√™ estava na √∫ltima vez. ‚ñ∂Ô∏è"
        )
        options = {
            "title": "Menu",
            "rows": [
                {
                    "title": "Continuar",
                    "id": UnaSusContinueChapter.__name__,
                    "description": "Continuar de onde parou.",
                },
                {
                    "title": "Unidade 1",
                    "id": UnaSusChapterOne.__name__,
                    "description": "Estatuto da Igualdade Racial",
                },
                {
                    "title": "Unidade 2",
                    "id": UnaSusChapterTwo.__name__,
                    "description": "PNSIPN",
                },
                {
                    "title": "Unidade 3",
                    "id": UnaSusChapterThree.__name__,
                    "description": "Mas o que aconteceu com a PNSIPN?",
                },
                {
                    "title": "Unidade 4",
                    "id": UnaSusChapterFour.__name__,
                    "description": "Marca, Diretrizes e Objetivos da PNSIPN",
                },
                {
                    "title": "Unidade 5",
                    "id": UnaSusChapterFive.__name__,
                    "description": "O Quesito Ra√ßa/Cor...",
                }
            ],
        }

        message = InteractiveListMessage(to=wa_id, button_name="Op√ß√µes", body_text=body)
        message.add_header(header)
        message.add_section(options)

        await message.send(self.client_session)

        self.next = "Redirecter"
        user = await get_user(self.db_session, wa_id)
        if not user:
            return
        user.current_step = self.next
        await self.db_session.commit()




# 0. Continue
@unasus_doc.register()
@unasus_bp.register()
class UnaSusContinueChapter(ScriptBaseModel):
    """Continues the user reading on the Una Sus PNSIPN
    topic."""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id

        user = await get_user(self.db_session, wa_id)
        if not user:
            return
        self.next = user.current_chapter_una  # type: ignore
        self.jump = True


# 1. Chapter one
@unasus_doc.register()
@unasus_bp.register()
class UnaSusChapterOne(ScriptBaseModel):
    """Chapter one Una Sus PNSIPN topic
    PNSPIPN e Estatuto da Igualdade Racial; Import√¢ncia da autodeclara√ß√£o de Ra√ßa/cor"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return

        contatc = contatcs[0]
        wa_id = contatc.wa_id

        message = TemplateMessage(
            to=wa_id,
            template_name="mvp_unasus_u1_0",
            has_static_header=True,
            has_flow_button=True,
            flow_button_index="0",
            flow_token=self.__class__.__name__,
        )
        await message.send(client_session=self.client_session)

        self.next = "Redirecter"
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        user.current_step = self.next
        user.current_chapter_una = self.__class__.__name__
        await self.db_session.commit()


@unasus_bp.register()
class UnaSusChapterOneContent(ScriptBaseModel):
    """Redirects the user to the videos they choose,
    or to the exercise section"""

    async def _fn(self):
        self.jump = True
        messages = self.value.messages
        if not messages:
            return
        message = messages[0]
        assert isinstance(message, NfmReplyMessage)
        contatcs = self.value.contacts
        if not contatcs:
            return
        contact = contatcs[0]
        wa_id = contact.wa_id
        user = await get_user(self.db_session, wa_id)

        response_json: dict = json.loads(message.interactive.nfm_reply.response_json)
        videos = response_json.get("Videos")
        assert isinstance(videos, list)
        if "Document√°rio_Luis_Gama" in videos:
            next_function = UnaSusVidLuisGamaDoc(
                self.db_session, self.client_session, self.registery, self.value
            )
            await next_function._fn()
        if "Filme_Doutor_Gama" in videos:
            next_function = UnaSusVidLuisGamaFilm(
                self.db_session, self.client_session, self.registery, self.value
            )
            await next_function._fn()

        user.chapter_grade_una["C1"] = 1  # type: ignore
        flag_modified(user, "chapter_grade_una")

        self.next = UnaSusExerciseOne.__name__
        user.current_chapter_una = UnaSusChapterTwo.__name__  # type: ignore
        await self.db_session.commit()

@unasus_doc.register()
@unasus_bp.register()
class UnaSusVidLuisGamaDoc(ScriptBaseModel):
    """Link for the video on the Documentary on Luis Gama"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return

        contatc = contatcs[0]
        wa_id = contatc.wa_id

        header = "Document√°rio Luis Gama"
        body_text = "O advogado da liberdade"
        display_text = "Assistir"
        url = "https://www.youtube.com/watch?v=WJ1aDH63QrE"
        message = CTAUrlButtonMessage(
            to=wa_id, display_text=display_text, body_text=body_text, url=url
        )
        message.add_header(header)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        user.current_step = self.next
        await self.db_session.commit()

@unasus_doc.register()
@unasus_bp.register()
class UnaSusVidLuisGamaFilm(ScriptBaseModel):
    """Link for the video on the Filme on Luis Gama"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return

        contatc = contatcs[0]
        wa_id = contatc.wa_id

        header = "Filme Doutor Gama"
        body_text = "O advogado da liberdade"
        display_text = "Assistir"
        url = "https://www.youtube.com/watch?v=fpQbv2W_ECQ"
        message = CTAUrlButtonMessage(
            to=wa_id, display_text=display_text, body_text=body_text, url=url
        )
        message.add_header(header)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        user.current_step = self.next
        await self.db_session.commit()


# 2. Chapeter two
@unasus_doc.register()
@unasus_bp.register()
class UnaSusChapterTwo(ScriptBaseModel):
    """Chapter two Una Sus PNSIPN topic
    A Pol√≠tica Nacional de Sa√∫de Integral da Popula√ß√£o Negra (PNSIPN)"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return

        contatc = contatcs[0]
        wa_id = contatc.wa_id

        message = TemplateMessage(
            to=wa_id,
            template_name="mvp_unasus_u2_0",
            has_static_header=True,
            has_flow_button=True,
            flow_button_index="0",
            flow_token=self.__class__.__name__,
        )
        await message.send(client_session=self.client_session)

        self.next = "Redirecter"
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        user.current_step = self.next
        user.current_chapter_una = self.__class__.__name__
        await self.db_session.commit()


@unasus_bp.register()
class UnaSusChapterTwoContent(ScriptBaseModel):
    """Redirects the user to the videos they choose,
    or to the exercise section"""

    async def _fn(self):
        self.jump = True
        messages = self.value.messages
        if not messages:
            return
        message = messages[0]
        assert isinstance(message, NfmReplyMessage)
        contatcs = self.value.contacts
        if not contatcs:
            return
        contact = contatcs[0]
        wa_id = contact.wa_id
        user = await get_user(self.db_session, wa_id)

        response_json: dict = json.loads(message.interactive.nfm_reply.response_json)

        if response_json.get("lei_cao"):
            next_function = UnaSusVidLeiCao(
                self.db_session, self.client_session, self.registery, self.value
            )
            await next_function._fn()
        if response_json.get("video_politica"):
            next_function = UnaSusVidPNSIPN(
                self.db_session, self.client_session, self.registery, self.value
            )
            await next_function._fn()
        if response_json.get("documento_historico"):
            next_function = UnaSusDocNorteador(
                self.db_session, self.client_session, self.registery, self.value
            )
            await next_function._fn()

        user.chapter_grade_una["C2"] = 1  # type: ignore
        flag_modified(user, "chapter_grade_una")
        self.next = UnaSusExerciseTwo.__name__
        user.current_chapter_una = UnaSusChapterThree.__name__  # type: ignore
        await self.db_session.commit()

@unasus_doc.register()
@unasus_bp.register()
class UnaSusVidLeiCao(ScriptBaseModel):
    """Link for the video ide document√°rio Lei CA√ì 30 anos de Exist√™ncia e Resist√™ncia - Lei 7.716/1989"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return

        contatc = contatcs[0]
        wa_id = contatc.wa_id

        header = "Document√°rio"
        body_text = "Lei CA√ì 30 anos de Exist√™ncia e Resist√™ncia"
        display_text = "Assistir"
        url = "https://www.bing.com/videos/riverview/relatedvideo?q=lei%20ca%C3%B3&mid=E1BACEBB9FDE26B3E700E1BACEBB9FDE26B3E700&ajaxhist=0"
        message = CTAUrlButtonMessage(
            to=wa_id, display_text=display_text, body_text=body_text, url=url
        )
        message.add_header(header)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        user.current_step = self.next
        await self.db_session.commit()

@unasus_doc.register()
@unasus_bp.register()
class UnaSusDocNorteador(ScriptBaseModel):
    """Pdf for the Documento
    hist√≥rico norteador do I Semin√°rio Nacional de Sa√∫de da Popula√ß√£o Negra.
    Nele voc√™ encontrar√° algumas das primeiras an√°lises espec√≠ficas sobre a sa√∫de da popula√ß√£o negra produzidas no Brasil.
    Recorreremos a ele diversas vezes ao longo desta sub-unidade"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return

        contatc = contatcs[0]
        wa_id = contatc.wa_id

        file_name = " Semin√°rio Nacional de Sa√∫de da Popula√ß√£o Negra.pdf"
        url = "https://bvsms.saude.gov.br/bvs/publicacoes/seminario_nacional_saude_pop_negra.pdf"
        caption = "Nele voc√™ encontrar√° algumas das primeiras an√°lises espec√≠ficas sobre a sa√∫de da popula√ß√£o negra produzidas no Brasil."
        message = DocumentMessage(
            to=wa_id, filename=file_name, link=url, caption=caption
        )
        await message.send(self.client_session)

        self.next = "Redirecter"
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        user.current_step = self.next
        await self.db_session.commit()

@unasus_doc.register()
@unasus_bp.register()
class UnaSusVidPNSIPN(ScriptBaseModel):
    """Link for the video V√≠deo Pol√≠tica Nacional de Sa√∫de Integral da Popula√ß√£o Negra (PNSIPN)
    Hist√≥rico, diretrizes e objetivos"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return

        contatc = contatcs[0]
        wa_id = contatc.wa_id

        header = "V√≠deo"
        body_text = "Pol√≠tica Nacional de Sa√∫de Integral da Popula√ß√£o Negra (PNSIPN) - Hist√≥rico, diretrizes e objetivos."
        display_text = "Assistir"
        url = "https://www.youtube.com/watch?v=ANK698VQEVM"
        message = CTAUrlButtonMessage(
            to=wa_id, display_text=display_text, body_text=body_text, url=url
        )
        message.add_header(header)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        user.current_step = self.next
        await self.db_session.commit()


# 3. Chapter
@unasus_doc.register()
@unasus_bp.register()
class UnaSusChapterThree(ScriptBaseModel):
    """Chapter two Una Sus PNSIPN topic
    A Pol√≠tica Nacional de Sa√∫de Integral da Popula√ß√£o Negra (PNSIPN)"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return

        contatc = contatcs[0]
        wa_id = contatc.wa_id

        message = TemplateMessage(
            to=wa_id,
            template_name="mvp_unasus_u3_0",
            has_static_header=True,
            has_flow_button=True,
            flow_button_index="0",
            flow_token=self.__class__.__name__,
        )
        await message.send(client_session=self.client_session)

        self.next = "Redirecter"
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        user.current_step = self.next
        user.current_chapter_una = self.__class__.__name__
        await self.db_session.commit()


@unasus_doc.register()
@unasus_bp.register()
class UnaSusChapterThreeContent(ScriptBaseModel):
    """Redirects the user to the videos they choose,
    or to the exercise section"""

    async def _fn(self):
        self.jump = True
        messages = self.value.messages
        if not messages:
            return
        message = messages[0]
        assert isinstance(message, NfmReplyMessage)
        contatcs = self.value.contacts
        if not contatcs:
            return
        contact = contatcs[0]
        wa_id = contact.wa_id
        user = await get_user(self.db_session, wa_id)

        user.chapter_grade_una["C3"] = 1  # type: ignore
        flag_modified(user, "chapter_grade_una")
        self.next = UnaSusExerciseThree.__name__
        user.current_chapter_una = UnaSusChapterFour.__name__  # type: ignore
        await self.db_session.commit()


# 4. Chapter
@unasus_doc.register()
@unasus_bp.register()
class UnaSusChapterFour(ScriptBaseModel):
    """Chapter two Una Sus PNSIPN topic
    A Pol√≠tica Nacional de Sa√∫de Integral da Popula√ß√£o Negra (PNSIPN)"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return

        contatc = contatcs[0]
        wa_id = contatc.wa_id

        message = TemplateMessage(
            to=wa_id,
            template_name="mvp_unasus_u4_0",
            has_static_header=True,
            has_flow_button=True,
            flow_button_index="0",
            flow_token=self.__class__.__name__,
        )
        await message.send(client_session=self.client_session)

        self.next = "Redirecter"
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        user.current_step = self.next
        user.current_chapter_una = self.__class__.__name__
        await self.db_session.commit()


@unasus_bp.register()
class UnaSusChapterFourContent(ScriptBaseModel):
    """Redirects the user to the videos they choose,
    or to the exercise section"""

    async def _fn(self):
        self.jump = True
        messages = self.value.messages
        if not messages:
            return
        message = messages[0]
        assert isinstance(message, NfmReplyMessage)
        contatcs = self.value.contacts
        if not contatcs:
            return
        contact = contatcs[0]
        wa_id = contact.wa_id
        user = await get_user(self.db_session, wa_id)

        user.chapter_grade_una["C4"] = 1  # type: ignore
        flag_modified(user, "chapter_grade_una")

        self.next = UnaSusExerciseFour.__name__
        user.current_chapter_una = UnaSusChapterFive.__name__  # type: ignore
        await self.db_session.commit()


# 5. Chapter
@unasus_doc.register()
@unasus_bp.register()
class UnaSusChapterFive(ScriptBaseModel):
    """Chapter two Una Sus PNSIPN topic
    A Pol√≠tica Nacional de Sa√∫de Integral da Popula√ß√£o Negra (PNSIPN)"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return

        contatc = contatcs[0]
        wa_id = contatc.wa_id

        message = TemplateMessage(
            to=wa_id,
            template_name="mvp_unasus_u5_0",
            has_static_header=True,
            has_flow_button=True,
            flow_button_index="0",
            flow_token=self.__class__.__name__,
        )
        await message.send(client_session=self.client_session)

        self.next = "Redirecter"
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        user.current_step = self.next
        user.current_chapter_una = self.__class__.__name__
        await self.db_session.commit()


@unasus_bp.register()
class UnaSusChapterFiveContent(ScriptBaseModel):
    """Redirects the user to the videos they choose,
    or to the exercise section"""

    async def _fn(self):
        self.jump = True
        messages = self.value.messages
        if not messages:
            return
        message = messages[0]
        assert isinstance(message, NfmReplyMessage)
        contatcs = self.value.contacts
        if not contatcs:
            return
        contact = contatcs[0]
        wa_id = contact.wa_id
        user = await get_user(self.db_session, wa_id)
        response_json: dict = json.loads(message.interactive.nfm_reply.response_json)

        if response_json.get("guia"):
            next_function = UnaSusDocGuia(
                self.db_session, self.client_session, self.registery, self.value
            )
            await next_function._fn()
        if response_json.get("abrasco"):
            next_function = UnaSusAbrasco(
                self.db_session, self.client_session, self.registery, self.value
            )
            await next_function._fn()
        if response_json.get("Portaria"):
            next_function = UnaSusPortaria(
                self.db_session, self.client_session, self.registery, self.value
            )
            await next_function._fn()

        user.chapter_grade_una["C5"] = 1  # type: ignore
        flag_modified(user, "chapter_grade_una")

        self.next = UnaSusExerciseFive.__name__
        user.current_chapter_una = UnaSusChapterFive.__name__  # type: ignore
        await self.db_session.commit()


@unasus_bp.register()
@unasus_doc.register()
class UnaSusPortaria(ScriptBaseModel):
    """Link for the site Portaria 344/2017"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return

        contatc = contatcs[0]
        wa_id = contatc.wa_id

        header = "Documento"
        body_text = "Portaria 344/2017"
        display_text = "Ler"
        url = (
            "https://bvsms.saude.gov.br/bvs/saudelegis/gm/2017/prt0344_01_02_2017.html"
        )
        message = CTAUrlButtonMessage(
            to=wa_id, display_text=display_text, body_text=body_text, url=url
        )
        message.add_header(header)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        user.current_step = self.next
        await self.db_session.commit()


@unasus_bp.register()
@unasus_doc.register()
class UnaSusAbrasco(ScriptBaseModel):
    """Link for the video Agora da ABRASCO sobre a PNSIPN e o preenchimento do 	quesito ra√ßa-cor."""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return

        contatc = contatcs[0]
        wa_id = contatc.wa_id

        header = "V√≠deo"
        body_text = (
            "Agora da ABRASCO sobre a PNSIPN e o preenchimento do 	quesito ra√ßa-cor. "
        )
        display_text = "Assistir"
        url = "https://www.youtube.com/watch?v=FxaMakGEOUI"
        message = CTAUrlButtonMessage(
            to=wa_id, display_text=display_text, body_text=body_text, url=url
        )
        message.add_header(header)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        user.current_step = self.next
        await self.db_session.commit()


@unasus_bp.register()
@unasus_doc.register()
class UnaSusDocGuia(ScriptBaseModel):
    """Pdf for the Documento
    Guia de Enfrentamento ao Racismo Institucional"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return

        contatc = contatcs[0]
        wa_id = contatc.wa_id

        file_name = "Guia de Enfrentamento ao Racismo Institucional.pdf"
        url = "https://www.onumulheres.org.br/wp-content/uploads/2013/12/Guia-de-enfrentamento-ao-racismo-institucional.pdf"
        message = DocumentMessage(to=wa_id, filename=file_name, link=url)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        user.current_step = self.next
        await self.db_session.commit()


# Exercises
@unasus_bp.register()
@unasus_doc.register()
class UnaSusExerciseMenu(ScriptBaseModel):
    """Menu conteining all Exercises for UnaSus content on
    Pol√≠tica Nacional de Sa√∫de Integral da Popula√ß√£o"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id

        header = "Hora de Praticar! - Exerc√≠cios PNSIPN"
        body = (
            "Excelente! Voc√™ est√° pronto(a) para testar seus conhecimentos na "
            "se√ß√£o de Exerc√≠cios do m√≥dulo sobre a Pol√≠tica Nacional de Sa√∫de Integral da Popula√ß√£o (PNSIPN). üí™\n\n"
            "Aqui voc√™ tem algumas op√ß√µes:\n\n"
            "1. *Escolher um conjunto de exerc√≠cios espec√≠fico*:\n"
            "Ideal se voc√™ quer praticar sobre um cap√≠tulo ou t√≥pico em particular. üéØ\n\n"
            "2. *Continuar os exerc√≠cios de onde parou*:\n"
            "Retome o √∫ltimo exerc√≠cio ou conjunto que voc√™ estava resolvendo. ‚ñ∂Ô∏è"
        )
        options = {
            "title": "Menu",
            "rows": [
                {
                    "title": "Continuar",
                    "id": UnaSusContinueExercise.__name__,
                    "description": "Continuar de onde parou.",
                },
                {
                    "title": "Unidade 1",
                    "id": UnaSusExerciseOne.__name__,
                    "description": "Estatuto da Igualdade Racial",
                },
                {
                    "title": "Unidade 2",
                    "id": UnaSusExerciseTwo.__name__,
                    "description": "PNSIPN",
                },
                {
                    "title": "Unidade 3",
                    "id": UnaSusExerciseThree.__name__,
                    "description": "Mas o que aconteceu com a PNSIPN?",
                },
                {
                    "title": "Unidade 4",
                    "id": UnaSusExerciseFour.__name__,
                    "description": "Marca, Diretrizes e Objetivos da PNSIPN",
                },
                {
                    "title": "Unidade 5",
                    "id": UnaSusExerciseFive.__name__,
                    "description": "O Quesito Ra√ßa/Cor...",
                },
            ],
        }

        message = InteractiveListMessage(to=wa_id, button_name="Op√ß√µes", body_text=body)
        message.add_header(header)
        message.add_section(options)

        await message.send(self.client_session)

        self.next = "Redirecter"
        user = await get_user(self.db_session, wa_id)
        if not user:
            return
        user.current_step = self.next
        await self.db_session.commit()


# 0. Continue
@unasus_doc.register()
@unasus_bp.register()
class UnaSusContinueExercise(ScriptBaseModel):
    """Continues the user reading on the Una Sus PNSIPN
    topic."""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        
        contatc = contatcs[0]
        wa_id = contatc.wa_id

        user = await get_user(self.db_session, wa_id)
        if not user:
            return
        
        self.next = user.current_exercise_una  # type: ignore
        self.jump = True


@unasus_bp.register()
@unasus_doc.register()
class UnaSusRetryExercise(ScriptBaseModel):
    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return

        contatc = contatcs[0]
        wa_id = contatc.wa_id

        message = InteractiveButtonMessage(
            to=wa_id,
            body_text="Deseja Tentar Novamente?",
            buttons=[
                {"id": UnaSusContinueExercise.__name__, "title": "Sim"},
                {"id": UnaSusContinueChapter.__name__, "title": "N√£o"},
            ],
        )
        message.add_header("Sua Resposta Estava Incorreta!")

        await message.send(self.client_session)

        self.next = "Redirecter"
        user = await get_user(self.db_session, wa_id)
        if not user:
            return
        user.current_step = self.next
        await self.db_session.commit()


# 1. Exercise
@unasus_doc.register()
@unasus_bp.register()
class UnaSusExerciseOne(ScriptBaseModel):
    """Exercise one Una Sus PNSIPN topic
    PNSPIPN e Estatuto da Igualdade Racial; Import√¢ncia da autodeclara√ß√£o de Ra√ßa/cor"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return

        contatc = contatcs[0]
        wa_id = contatc.wa_id

        message = TemplateMessage(
            to=wa_id,
            template_name="mvp_unasus_e1_0",
            has_static_header=True,
            has_flow_button=True,
            flow_button_index="0",
            flow_token=self.__class__.__name__,
        )
        await message.send(client_session=self.client_session)

        self.next = "Redirecter"
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        user.current_step = self.next
        user.current_exercise_una = self.__class__.__name__
        await self.db_session.commit()


@unasus_bp.register()
class UnaSusExerciseOneHandle(ScriptBaseModel):
    """Handles Exercise one answers"""

    async def _fn(self):
        self.jump = True
        messages = self.value.messages
        if not messages:
            return
        message = messages[0]
        assert isinstance(message, NfmReplyMessage)
        contatcs = self.value.contacts
        if not contatcs:
            return
        contact = contatcs[0]
        wa_id = contact.wa_id
        user = await get_user(self.db_session, wa_id)

        q1_handler = UnaSusExerciseOneQ1Answer(
            self.db_session, self.client_session, self.registery, self.value
        )
        await q1_handler._fn()

        q2_handler = UnaSusExerciseOneQ2Answer(
            self.db_session, self.client_session, self.registery, self.value
        )
        await q2_handler._fn()

        response_json: dict = json.loads(message.interactive.nfm_reply.response_json)

        q1_answer = response_json.get("q1")
        q2_answer = response_json.get("q2")

        self.next = UnaSusChapterTwo.__name__

        if (q1_answer != "b") or (q2_answer != "c"):
            self.next = UnaSusRetryExercise.__name__

        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        user.current_step = self.next
        await self.db_session.commit()


@unasus_bp.register()
class UnaSusExerciseOneQ1Answer(ScriptBaseModel):
    """Handles Exercise one Question one"""

    async def _fn(self):
        messages = self.value.messages
        if not messages:
            return
        message = messages[0]
        assert isinstance(message, NfmReplyMessage)
        contatcs = self.value.contacts
        if not contatcs:
            return
        contact = contatcs[0]
        wa_id = contact.wa_id
        user = await get_user(self.db_session, wa_id)

        response_json: dict = json.loads(message.interactive.nfm_reply.response_json)
        q1_answer = response_json.get("q1")

        match q1_answer:
            case "a":
                handler = UnaSusE1Q1A(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()
            case "b":
                handler = UnaSusE1Q1B(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()
                user.exercise_grade_una["E1"][0] = 1  # type: ignore
                flag_modified(user, "exercise_grade_una")
                await self.db_session.commit()
            case "c":
                handler = UnaSusE1Q1C(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()
            case "d":
                handler = UnaSusE1Q1D(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()

@unasus_doc.register()
@unasus_bp.register()
class UnaSusE1Q1A(ScriptBaseModel):
    """Explains UnaSus Exercise one Question 1 Alternative A"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Incorreta*:\n\n"
            "A PNSIPN foca na integralidade da sa√∫de e no combate √†s desigualdades para "
            "promover o acesso equitativo, n√£o na institui√ß√£o de cotas para acesso a servi√ßos."
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()


@unasus_doc.register()
@unasus_bp.register()
class UnaSusE1Q1B(ScriptBaseModel):
    """Explains UnaSus Exercise one Question 1 Alternative B"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Correta*:\n\n"
            "A apresenta√ß√£o da Unidade 1 afirma que a PNSIPN '√© a primeira  "
            "pol√≠tica p√∫blica a reconhecer oficialmente o racismo institucional e estrutural, "
            "bem como reconhecer os diversos impactos adversos do racismo na sa√∫de'."
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()

@unasus_doc.register()
@unasus_bp.register()
class UnaSusE1Q1C(ScriptBaseModel):
    """Explains UnaSus Exercise one Question  1 Alternative C"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Incorreta*:\n\n"
            "A PNSIPN incentiva a forma√ß√£o e educa√ß√£o permanente dos trabalhadores da "
            "sa√∫de sobre o tema, mas n√£o estabelece obrigatoriedade de contrata√ß√£o baseada "
            "em ra√ßa."
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()

@unasus_doc.register()
@unasus_bp.register()
class UnaSusE1Q1D(ScriptBaseModel):
    """Explains UnaSus Exercise one Question 1 Alternative D"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Incorreta*:\n\n"
            "A pol√≠tica visa a melhoria das condi√ß√µes de sa√∫de da popula√ß√£o negra dentro "
            "do SUS, promovendo equidade, e n√£o criando um sistema de financiamento paralelo."
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()


@unasus_bp.register()
class UnaSusExerciseOneQ2Answer(ScriptBaseModel):
    """Handles Exercise one Question two"""

    async def _fn(self):
        messages = self.value.messages
        if not messages:
            return
        message = messages[0]
        assert isinstance(message, NfmReplyMessage)
        contatcs = self.value.contacts
        if not contatcs:
            return
        contact = contatcs[0]
        wa_id = contact.wa_id
        user = await get_user(self.db_session, wa_id)

        response_json: dict = json.loads(message.interactive.nfm_reply.response_json)
        q2_answer = response_json.get("q2")

        match q2_answer:
            case "a":
                handler = UnaSusE1Q2A(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()
            case "b":
                handler = UnaSusE1Q2B(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()
            case "c":
                handler = UnaSusE1Q2C(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()
                user.exercise_grade_una["E1"][1] = 1  # type: ignore
                flag_modified(user, "exercise_grade_una")
                await self.db_session.commit()
            case "d":
                handler = UnaSusE1Q2D(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()

@unasus_doc.register()
@unasus_bp.register()
class UnaSusE1Q2A(ScriptBaseModel):
    """Explains UnaSus Exercise one Question 2 Alternative A"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Incorreta*:\n\n"
            "Embora a PNSIPN aborde a sa√∫de da popula√ß√£o negra de forma integral, a Portaria "
            "344 tem como foco espec√≠fico a coleta do dado ra√ßa/cor."
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()

@unasus_doc.register()
@unasus_bp.register()
class UnaSusE1Q2B(ScriptBaseModel):
    """Explains UnaSus Exercise one Question 2 Alternative B"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Incorreta*:\n\n"
            "A Portaria 344 √© normativa sobre a coleta de dados e n√£o trata diretamente "
            "de mecanismos de repasse de verbas, embora os dados coletados possam subsidiar "
            "planejamentos futuros. "
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()

@unasus_doc.register()
@unasus_bp.register()
class UnaSusE1Q2C(ScriptBaseModel):
    """Explains UnaSus Exercise one Question 2 Alternative C"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Correta*:\n\n"
            "A Unidade 1 menciona que 'Em 2017, a Portaria 344 estabeleceu "
            "a obrigatoriedade do adequado e completo preenchimento quesito ra√ßa/cor nos "
            "documentos de registro do SUS a partir da auto-declara√ß√£o dos pacientes'. "
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()

@unasus_doc.register()
@unasus_bp.register()
class UnaSusE1Q2D(ScriptBaseModel):
    """Explains UnaSus Exercise one Question 2 Alternative D"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Incorreta*:\n\n"
            "Campanhas de conscientiza√ß√£o s√£o importantes, mas a Portaria 344 estabelece "
            "uma norma procedimental para a coleta de informa√ß√µes. "
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()


# 2. Exercise
@unasus_doc.register()
@unasus_bp.register()
class UnaSusExerciseTwo(ScriptBaseModel):
    """Exercise Two Una Sus PNSIPN
    topic A Pol√≠tica Nacional de Sa√∫de Integral da Popula√ß√£o Negra (PNSIPN)"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return

        contatc = contatcs[0]
        wa_id = contatc.wa_id

        message = TemplateMessage(
            to=wa_id,
            template_name="mvp_unasus_e2_0",
            has_static_header=True,
            has_flow_button=True,
            flow_button_index="0",
            flow_token=self.__class__.__name__,
        )
        await message.send(client_session=self.client_session)

        self.next = "Redirecter"
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        user.current_step = self.next
        user.current_exercise_una = self.__class__.__name__
        await self.db_session.commit()


@unasus_bp.register()
class UnaSusExerciseTwoHandle(ScriptBaseModel):
    """Handles Exercise Two answers"""

    async def _fn(self):
        self.jump = True
        messages = self.value.messages
        if not messages:
            return
        message = messages[0]
        assert isinstance(message, NfmReplyMessage)
        contatcs = self.value.contacts
        if not contatcs:
            return
        contact = contatcs[0]
        wa_id = contact.wa_id
        user = await get_user(self.db_session, wa_id)

        q1_handler = UnaSusExerciseTwoQ1Answer(
            self.db_session, self.client_session, self.registery, self.value
        )
        await q1_handler._fn()

        q2_handler = UnaSusExerciseTwoQ2Answer(
            self.db_session, self.client_session, self.registery, self.value
        )
        await q2_handler._fn()

        response_json: dict = json.loads(message.interactive.nfm_reply.response_json)

        q1_answer = response_json.get("q1")
        q2_answer = response_json.get("q2")

        self.next = UnaSusChapterThree.__name__

        if (q1_answer != "b") or (q2_answer != "c"):
            self.next = UnaSusRetryExercise.__name__

        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        user.current_step = self.next
        await self.db_session.commit()


@unasus_bp.register()
class UnaSusExerciseTwoQ1Answer(ScriptBaseModel):
    """Handles Exercise 2 Question one"""

    async def _fn(self):
        messages = self.value.messages
        if not messages:
            return
        message = messages[0]
        assert isinstance(message, NfmReplyMessage)
        contatcs = self.value.contacts
        if not contatcs:
            return
        contact = contatcs[0]
        wa_id = contact.wa_id
        user = await get_user(self.db_session, wa_id)

        response_json: dict = json.loads(message.interactive.nfm_reply.response_json)
        q1_answer = response_json.get("q1")

        match q1_answer:
            case "a":
                handler = UnaSusE2Q1A(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()
            case "b":
                handler = UnaSusE2Q1B(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()
                user.exercise_grade_una["E2"][0] = 1  # type: ignore
                flag_modified(user, "exercise_grade_una")
                await self.db_session.commit()
            case "c":
                handler = UnaSusE2Q1C(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()
            case "d":
                handler = UnaSusE2Q1D(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()

@unasus_doc.register()
@unasus_bp.register()
class UnaSusE2Q1A(ScriptBaseModel):
    """Explains UnaSus Exercise 2 Question 1 Alternative A"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Incorreta*:\n\n"
            "O texto destaca que a PNSIPN √© 'mais uma conquista dos movimentos sociais' "
            "e 'fruto de intensas mobiliza√ß√µes do Movimento Negro'. "
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()
        
@unasus_doc.register()
@unasus_bp.register()
class UnaSusE2Q1B(ScriptBaseModel):
    """Explains UnaSus Exercise 2 Question 1 Alternative B"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Correta*:\n\n"
            "A Unidade 2 afirma que a PNSIPN '√© a primeira legisla√ß√£o "
            "nacional a reconhecer a exist√™ncia do racismo institucional e o impacto do racismo "
            "na sa√∫de'. "
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()

@unasus_doc.register()
@unasus_bp.register()
class UnaSusE2Q1C(ScriptBaseModel):
    """Explains UnaSus Exercise 2 Question  1 Alternative C"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Incorreta*:\n\n"
            "Embora a aten√ß√£o √† anemia falciforme seja um componente importante, a PNSIPN "
            "√© mais abrangente, incluindo 'a√ß√µes de cuidado, aten√ß√£o, promo√ß√£o √† sa√∫de "
            "e preven√ß√£o de doen√ßas... gest√£o participativa, participa√ß√£o popular e controle "
            "social, produ√ß√£o de conhecimento, forma√ß√£o e educa√ß√£o permanente'. "
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()

@unasus_doc.register()
@unasus_bp.register()
class UnaSusE2Q1D(ScriptBaseModel):
    """Explains UnaSus Exercise 2 Question 1 Alternative D"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Incorreta*:\n\n"
            "A PNSIPN √© uma pol√≠tica institu√≠da, n√£o um programa tempor√°rio, e visa a "
            "melhoria cont√≠nua das condi√ß√µes de sa√∫de da popula√ß√£o negra. "
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()


@unasus_bp.register()
class UnaSusExerciseTwoQ2Answer(ScriptBaseModel):
    """Handles Exercise 2 Question two"""

    async def _fn(self):
        messages = self.value.messages
        if not messages:
            return
        message = messages[0]
        assert isinstance(message, NfmReplyMessage)
        contatcs = self.value.contacts
        if not contatcs:
            return
        contact = contatcs[0]
        wa_id = contact.wa_id
        user = await get_user(self.db_session, wa_id)

        response_json: dict = json.loads(message.interactive.nfm_reply.response_json)
        q2_answer = response_json.get("q2")

        match q2_answer:
            case "a":
                handler = UnaSusE2Q2A(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()
            case "b":
                handler = UnaSusE2Q2B(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()
            case "c":
                handler = UnaSusE2Q2C(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()
                user.exercise_grade_una["E2"][1] = 1  # type: ignore
                flag_modified(user, "exercise_grade_una")
                await self.db_session.commit()
            case "d":
                handler = UnaSusE2Q2D(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()

@unasus_doc.register()
@unasus_bp.register()
class UnaSusE2Q2A(ScriptBaseModel):
    """Explains UnaSus Exercise 2 Question 2 Alternative A"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Incorreta*:\n\n"
            "A Lei Afonso Arinos √© mencionada como uma das 'medidas legais que foram sendo "
            "produzidas visando reduzir as iniquidades √©tnico-raciais hist√≥ricas'. "
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()

@unasus_doc.register()
@unasus_bp.register()
class UnaSusE2Q2B(ScriptBaseModel):
    """Explains UnaSus Exercise 2 Question 2 Alternative B"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Incorreta*:\n\n"
            "A Lei Ca√≥ tamb√©m √© citada no mesmo contexto da Lei Afonso Arinos."
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()

@unasus_doc.register()
@unasus_bp.register()
class UnaSusE2Q2C(ScriptBaseModel):
    """Explains UnaSus Exercise 2 Question 2 Alternative C"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Correta*:\n\n"
            "A Unidade 2 lista diversas leis e decretos importantes, "
            "como a Lei Afonso Arinos, a Lei Ca√≥ e a cria√ß√£o da SEPPIR. O Estatuto da Crian√ßa "
            "e do Adolescente, embora fundamental para os direitos infantojuvenis, n√£o √© "
            "especificamente mencionado no contexto da trajet√≥ria de cria√ß√£o da PNSIPN descrito "
            "nesta unidade. "
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()

@unasus_doc.register()
@unasus_bp.register()
class UnaSusE2Q2D(ScriptBaseModel):
    """Explains UnaSus Exercise 2 Question 2 Alternative D"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Incorreta*:\n\n"
            "A cria√ß√£o da SEPPIR √© listada como um dos desenvolvimentos importantes no "
            "per√≠odo que antecedeu a PNSIPN. "
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()


# 3. Exercise
@unasus_doc.register()
@unasus_bp.register()
class UnaSusExerciseThree(ScriptBaseModel):
    """Exercise Two Una Sus PNSIPN
    topic A Pol√≠tica Nacional de Sa√∫de Integral da Popula√ß√£o Negra (PNSIPN)"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return

        contatc = contatcs[0]
        wa_id = contatc.wa_id

        message = TemplateMessage(
            to=wa_id,
            template_name="mvp_unasus_e3_0",
            has_static_header=True,
            has_flow_button=True,
            flow_button_index="0",
            flow_token=self.__class__.__name__,
        )
        await message.send(client_session=self.client_session)

        self.next = "Redirecter"
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        user.current_step = self.next
        user.current_exercise_una = self.__class__.__name__
        await self.db_session.commit()


@unasus_bp.register()
class UnaSusExerciseThreeHandle(ScriptBaseModel):
    """Handles Exercise Three answers"""

    async def _fn(self):
        self.jump = True
        messages = self.value.messages
        if not messages:
            return
        message = messages[0]
        assert isinstance(message, NfmReplyMessage)
        contatcs = self.value.contacts
        if not contatcs:
            return
        contact = contatcs[0]
        wa_id = contact.wa_id
        user = await get_user(self.db_session, wa_id)

        q1_handler = UnaSusExerciseThreeQ1Answer(
            self.db_session, self.client_session, self.registery, self.value
        )
        await q1_handler._fn()

        q2_handler = UnaSusExerciseThreeQ2Answer(
            self.db_session, self.client_session, self.registery, self.value
        )
        await q2_handler._fn()

        response_json: dict = json.loads(message.interactive.nfm_reply.response_json)

        q1_answer = response_json.get("q1")
        q2_answer = response_json.get("q2")

        self.next = UnaSusChapterFour.__name__

        if (q1_answer != "c") or (q2_answer != "c"):
            self.next = UnaSusRetryExercise.__name__

        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        user.current_step = self.next
        await self.db_session.commit()


@unasus_bp.register()
class UnaSusExerciseThreeQ1Answer(ScriptBaseModel):
    """Handles Exercise 3 Question one"""

    async def _fn(self):
        messages = self.value.messages
        if not messages:
            return
        message = messages[0]
        assert isinstance(message, NfmReplyMessage)
        contatcs = self.value.contacts
        if not contatcs:
            return
        contact = contatcs[0]
        wa_id = contact.wa_id
        user = await get_user(self.db_session, wa_id)

        response_json: dict = json.loads(message.interactive.nfm_reply.response_json)
        q1_answer = response_json.get("q1")

        match q1_answer:
            case "a":
                handler = UnaSusE3Q1A(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()
            case "b":
                handler = UnaSusE3Q1B(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()
            case "c":
                handler = UnaSusE3Q1C(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()
                user.exercise_grade_una["E3"][0] = 1  # type: ignore
                flag_modified(user, "exercise_grade_una")
                await self.db_session.commit()
            case "d":
                handler = UnaSusE3Q1D(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()


@unasus_bp.register()
@unasus_doc.register()
class UnaSusE3Q1A(ScriptBaseModel):
    """Explains UnaSus Exercise 3 Question 1 Alternative A"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Incorreta*:\n\n"
            "'O texto indica o oposto: menor acesso e menor taxa de interna√ß√£o para a "
            "popula√ß√£o negra.' "
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()


@unasus_bp.register()
@unasus_doc.register()
class UnaSusE3Q1B(ScriptBaseModel):
    """Explains UnaSus Exercise 3 Question 1 Alternative B"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Incorreta*:\n\n"
            "N√£o h√° men√ß√£o no texto sobre desenvolvimento de tratamentos espec√≠ficos mais "
            "eficazes para a popula√ß√£o negra durante a pandemia; pelo contr√°rio, as desigualdades "
            "no acesso foram ressaltadas. "
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()


@unasus_bp.register()
@unasus_doc.register()
class UnaSusE3Q1C(ScriptBaseModel):
    """Explains UnaSus Exercise 3 Question  1 Alternative C"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Correta*:\n\n"
            "A Unidade 3 afirma que 'Durante a pandemia de COVID-19, "
            "evidenciou-se de forma aguda os impactos do racismo estrutural na sa√∫de dessa "
            "popula√ß√£o. Os negros tiveram menos acesso a servi√ßos de sa√∫de, menor taxa de "
            "interna√ß√£o, receberam menos vacinas e tiveram maior taxa de mortalidade pelo "
            "SARS-CoV-2 que a popula√ß√£o branca'. "
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()


@unasus_bp.register()
@unasus_doc.register()
class UnaSusE3Q1D(ScriptBaseModel):
    """Explains UnaSus Exercise 3 Question 1 Alternative D"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Incorreta*:\n\n"
            "O texto contradiz essa afirma√ß√£o, explicitando que a pandemia evidenciou "
            "os impactos do racismo estrutural e as desigualdades raciais na sa√∫de. "
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()


@unasus_bp.register()
class UnaSusExerciseThreeQ2Answer(ScriptBaseModel):
    """Handles Exercise 2 Question two"""

    async def _fn(self):
        messages = self.value.messages
        if not messages:
            return
        message = messages[0]
        assert isinstance(message, NfmReplyMessage)
        contatcs = self.value.contacts
        if not contatcs:
            return
        contact = contatcs[0]
        wa_id = contact.wa_id
        user = await get_user(self.db_session, wa_id)

        response_json: dict = json.loads(message.interactive.nfm_reply.response_json)
        q2_answer = response_json.get("q2")

        match q2_answer:
            case "a":
                handler = UnaSusE3Q2A(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()
            case "b":
                handler = UnaSusE3Q2B(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()
            case "c":
                handler = UnaSusE3Q2C(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()
                user.exercise_grade_una["E3"][1] = 1  # type: ignore
                flag_modified(user, "exercise_grade_una")
                await self.db_session.commit()
            case "d":
                handler = UnaSusE3Q2D(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()


@unasus_bp.register()
@unasus_doc.register()
class UnaSusE3Q2A(ScriptBaseModel):
    """Explains UnaSus Exercise 3 Question 2 Alternative A"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Incorreta*:\n\n"
            "O texto foca em barreiras estruturais e institucionais de acesso, e n√£o em "
            "uma recusa generalizada por parte das comunidades. A PNSIPN, inclusive, prev√™ "
            "o reconhecimento de saberes populares. "
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()


@unasus_bp.register()
@unasus_doc.register()
class UnaSusE3Q2B(ScriptBaseModel):
    """Explains UnaSus Exercise 3 Question 2 Alternative B"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Incorreta*:\n\n"
            "O problema apontado √© o acesso limitado a servi√ßos e equipamentos de sa√∫de, "
            "e n√£o um excesso de equipes. "
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()


@unasus_bp.register()
@unasus_doc.register()
class UnaSusE3Q2C(ScriptBaseModel):
    """Explains UnaSus Exercise 3 Question 2 Alternative C"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Correta*:\n\n"
            "A Unidade 3 aponta que 'a maioria dos seus territ√≥rios "
            "tradicionalmente ocupados continua sem reconhecimento/demarca√ß√£o oficial, e "
            "muitos munic√≠pios sequer reconhecem a exist√™ncia dessas comunidades em sua √°rea "
            "de abrang√™ncia', o que impacta o acesso a pol√≠ticas p√∫blicas, incluindo sa√∫de. "
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()


@unasus_bp.register()
@unasus_doc.register()
class UnaSusE3Q2D(ScriptBaseModel):
    """Explains UnaSus Exercise 3 Question 2 Alternative D"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Incorreta*:\n\n"
            "O texto afirma o contr√°rio: ''as popula√ß√µes quilombolas, apresentam os piores "
            "indicadores nacionais de sa√∫de''.' "
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()


# 4. Exercise
@unasus_bp.register()
@unasus_doc.register()
class UnaSusExerciseFour(ScriptBaseModel):
    """Exercise Two Una Sus PNSIPN
    topic A Pol√≠tica Nacional de Sa√∫de Integral da Popula√ß√£o Negra (PNSIPN)"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return

        contatc = contatcs[0]
        wa_id = contatc.wa_id

        message = TemplateMessage(
            to=wa_id,
            template_name="mvp_unasus_e4_1",
            has_static_header=True,
            has_flow_button=True,
            flow_button_index="0",
            flow_token=self.__class__.__name__,
        )
        await message.send(client_session=self.client_session)

        self.next = "Redirecter"
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        user.current_step = self.next
        user.current_exercise_una = self.__class__.__name__
        await self.db_session.commit()


@unasus_bp.register()
class UnaSusExerciseFourHandle(ScriptBaseModel):
    """Handles Exercise Four answers"""

    async def _fn(self):
        self.jump = True
        messages = self.value.messages
        if not messages:
            return
        message = messages[0]
        assert isinstance(message, NfmReplyMessage)
        contatcs = self.value.contacts
        if not contatcs:
            return
        contact = contatcs[0]
        wa_id = contact.wa_id
        user = await get_user(self.db_session, wa_id)

        q1_handler = UnaSusExerciseFourQ1Answer(
            self.db_session, self.client_session, self.registery, self.value
        )
        await q1_handler._fn()

        q2_handler = UnaSusExerciseFourQ2Answer(
            self.db_session, self.client_session, self.registery, self.value
        )
        await q2_handler._fn()

        response_json: dict = json.loads(message.interactive.nfm_reply.response_json)

        q1_answer = response_json.get("q1")
        q2_answer = response_json.get("q2")

        self.next = UnaSusChapterFive.__name__

        if (q1_answer != "b") or (q2_answer != "c"):
            self.next = UnaSusRetryExercise.__name__

        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        user.current_step = self.next
        await self.db_session.commit()


@unasus_bp.register()
class UnaSusExerciseFourQ1Answer(ScriptBaseModel):
    """Handles Exercise 4 Question one"""

    async def _fn(self):
        messages = self.value.messages
        if not messages:
            return
        message = messages[0]
        assert isinstance(message, NfmReplyMessage)
        contatcs = self.value.contacts
        if not contatcs:
            return
        contact = contatcs[0]
        wa_id = contact.wa_id
        user = await get_user(self.db_session, wa_id)

        response_json: dict = json.loads(message.interactive.nfm_reply.response_json)
        q1_answer = response_json.get("q1")

        match q1_answer:
            case "a":
                handler = UnaSusE4Q1A(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()
            case "b":
                handler = UnaSusE4Q1B(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()
                user.exercise_grade_una["E4"][0] = 1  # type: ignore
                flag_modified(user, "exercise_grade_una")
                await self.db_session.commit()
            case "c":
                handler = UnaSusE4Q1C(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()
            case "d":
                handler = UnaSusE4Q1D(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()


@unasus_bp.register()
@unasus_doc.register()
class UnaSusE4Q1A(ScriptBaseModel):
    """Explains UnaSus Exercise 4 Question 1 Alternative A"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Incorreta*:\n\n"
            "Fomentar estudos e pesquisas √© um objetivo espec√≠fico (XII), mas o objetivo "
            "geral √© mais amplo e focado na promo√ß√£o da sa√∫de integral e combate √†s desigualdades. "
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()


@unasus_bp.register()
@unasus_doc.register()
class UnaSusE4Q1B(ScriptBaseModel):
    """Explains UnaSus Exercise 4 Question 1 Alternative B"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Correta*:\n\n"
            "A Unidade 4 define o Objetivo Geral da PNSIPN como: ''Promover "
            "a sa√∫de integral da popula√ß√£o negra, priorizando a redu√ß√£o das desigualdades "
            "√©tnico-raciais, o combate ao racismo e √† discrimina√ß√£o nas institui√ß√µes e servi√ßos "
            "do SUS.''' "
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()


@unasus_bp.register()
@unasus_doc.register()
class UnaSusE4Q1C(ScriptBaseModel):
    """Explains UnaSus Exercise 4 Question  1 Alternative C"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Incorreta*:\n\n"
            "Embora a participa√ß√£o e o controle social sejam diretrizes, o objetivo geral "
            "n√£o se restringe √† representa√ß√£o em cargos de gest√£o, mas √† promo√ß√£o da sa√∫de "
            "integral. "
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()


@unasus_bp.register()
@unasus_doc.register()
class UnaSusE4Q1D(ScriptBaseModel):
    """Explains UnaSus Exercise 4 Question 1 Alternative D"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Incorreta*:\n\n"
            "A PNSIPN visa a equidade dentro do SUS, fortalecendo-o para atender adequadamente "
            "a popula√ß√£o negra, e n√£o criar um sistema paralelo. "
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()


@unasus_bp.register()
class UnaSusExerciseFourQ2Answer(ScriptBaseModel):
    """Handles Exercise 2 Question two"""

    async def _fn(self):
        messages = self.value.messages
        if not messages:
            return
        message = messages[0]
        assert isinstance(message, NfmReplyMessage)
        contatcs = self.value.contacts
        if not contatcs:
            return
        contact = contatcs[0]
        wa_id = contact.wa_id
        user = await get_user(self.db_session, wa_id)

        response_json: dict = json.loads(message.interactive.nfm_reply.response_json)
        q2_answer = response_json.get("q2")

        match q2_answer:
            case "a":
                handler = UnaSusE4Q2A(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()
            case "b":
                handler = UnaSusE4Q2B(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()
            case "c":
                handler = UnaSusE4Q2C(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()
                user.exercise_grade_una["E4"][1] = 1  # type: ignore
                flag_modified(user, "exercise_grade_una")
                await self.db_session.commit()
            case "d":
                handler = UnaSusE4Q2D(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()


@unasus_bp.register()
class UnaSusE4Q2A(ScriptBaseModel):
    """Explains UnaSus Exercise 4 Question 2 Alternative A"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Incorreta*:\n\n"
            "Esta √© a Diretriz Geral I, focada na forma√ß√£o dos profissionais."
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()


@unasus_bp.register()
class UnaSusE4Q2B(ScriptBaseModel):
    """Explains UnaSus Exercise 4 Question 2 Alternative B"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Incorreta*:\n\n"
            "Esta √© a Diretriz Geral II, focada na participa√ß√£o social."
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()


@unasus_bp.register()
class UnaSusE4Q2C(ScriptBaseModel):
    """Explains UnaSus Exercise 4 Question 2 Alternative C"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Correta*:\n\n"
            "'A Diretriz Geral IV da PNSIPN, conforme a Unidade 4, √©: "
            "''Promo√ß√£o do reconhecimento dos saberes e pr√°ticas populares de sa√∫de, incluindo "
            "aqueles preservados pelas religi√µes de matrizes africanas'', o que se alinha "
            "com a valoriza√ß√£o de conhecimentos n√£o hegem√¥nicos.' "
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()

@unasus_doc.register()
@unasus_bp.register()
class UnaSusE4Q2D(ScriptBaseModel):
    """Explains UnaSus Exercise 4 Question 2 Alternative D"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Incorreta*:\n\n"
            "Esta √© a Diretriz Geral V, focada no monitoramento e avalia√ß√£o."
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()


# 5. Exercise
@unasus_doc.register()
@unasus_bp.register()
class UnaSusExerciseFive(ScriptBaseModel):
    """Exercise Two Una Sus PNSIPN
    topic A Pol√≠tica Nacional de Sa√∫de Integral da Popula√ß√£o Negra (PNSIPN)"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return

        contatc = contatcs[0]
        wa_id = contatc.wa_id

        message = TemplateMessage(
            to=wa_id,
            template_name="mvp_unasus_e5_0",
            has_static_header=True,
            has_flow_button=True,
            flow_button_index="0",
            flow_token=self.__class__.__name__,
        )
        await message.send(client_session=self.client_session)

        self.next = "Redirecter"
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        user.current_step = self.next
        user.current_exercise_una = self.__class__.__name__
        await self.db_session.commit()


@unasus_bp.register()
class UnaSusExerciseFiveHandle(ScriptBaseModel):
    """Handles Exercise Five answers"""

    async def _fn(self):
        self.jump = True
        messages = self.value.messages
        if not messages:
            return
        message = messages[0]
        assert isinstance(message, NfmReplyMessage)
        contatcs = self.value.contacts
        if not contatcs:
            return
        contact = contatcs[0]
        wa_id = contact.wa_id
        user = await get_user(self.db_session, wa_id)

        q1_handler = UnaSusExerciseFiveQ1Answer(
            self.db_session, self.client_session, self.registery, self.value
        )
        await q1_handler._fn()

        q2_handler = UnaSusExerciseFiveQ2Answer(
            self.db_session, self.client_session, self.registery, self.value
        )
        await q2_handler._fn()

        response_json: dict = json.loads(message.interactive.nfm_reply.response_json)

        q1_answer = response_json.get("q1")
        q2_answer = response_json.get("q2")

        self.next = UnaCheckCongratulations.__name__

        if (q1_answer != "b") or (q2_answer != "c"):
            self.next = UnaSusRetryExercise.__name__

        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        user.current_step = self.next
        await self.db_session.commit()


@unasus_bp.register()
class UnaSusExerciseFiveQ1Answer(ScriptBaseModel):
    """Handles Exercise 5 Question one"""

    async def _fn(self):
        messages = self.value.messages
        if not messages:
            return
        message = messages[0]
        assert isinstance(message, NfmReplyMessage)
        contatcs = self.value.contacts
        if not contatcs:
            return
        contact = contatcs[0]
        wa_id = contact.wa_id
        user = await get_user(self.db_session, wa_id)

        response_json: dict = json.loads(message.interactive.nfm_reply.response_json)
        q1_answer = response_json.get("q1")

        match q1_answer:
            case "a":
                handler = UnaSusE5Q1A(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()
            case "b":
                handler = UnaSusE5Q1B(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()
                user.exercise_grade_una["E5"][0] = 1  # type: ignore
                flag_modified(user, "exercise_grade_una")
                await self.db_session.commit()
            case "c":
                handler = UnaSusE5Q1C(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()
            case "d":
                handler = UnaSusE5Q1D(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()


@unasus_bp.register()
@unasus_doc.register()
class UnaSusE5Q1A(ScriptBaseModel):
    """Explains UnaSus Exercise 5 Question 1 Alternative A"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Incorreta*:\n\n"
            "O texto explicitamente condena a heteroidentifica√ß√£o (quando o servidor atribui "
            "a ra√ßa/cor sem perguntar), indicando que √© contr√°ria √† Portaria 344. "
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()


@unasus_bp.register()
@unasus_doc.register()
class UnaSusE5Q1B(ScriptBaseModel):
    """Explains UnaSus Exercise 5 Question 1 Alternative B"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Correta*:\n\n"
            "A Unidade 5, ao discutir a Portaria 344/2017, enfatiza "
            "que a coleta 'respeitar√° o crit√©rio de autodeclara√ß√£o do usu√°rio de sa√∫de'. "
            "O texto tamb√©m critica a heteroidentifica√ß√£o, que seria a observa√ß√£o pelo profissional. "
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()


@unasus_bp.register()
@unasus_doc.register()
class UnaSusE5Q1C(ScriptBaseModel):
    """Explains UnaSus Exercise 5 Question  1 Alternative C"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Incorreta*:\n\n"
            "A portaria foca na autodeclara√ß√£o no momento do atendimento no servi√ßo de "
            "sa√∫de, n√£o primariamente em registros civis para essa finalidade. "
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()


@unasus_bp.register()
@unasus_doc.register()
class UnaSusE5Q1D(ScriptBaseModel):
    """Explains UnaSus Exercise 5 Question 1 Alternative D"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Incorreta*:\n\n"
            "Embora a ascend√™ncia possa influenciar a autodeclara√ß√£o, o crit√©rio estabelecido "
            "pela portaria √© a autodeclara√ß√£o do indiv√≠duo sobre como ele se identifica "
            "no momento. "
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()


@unasus_bp.register()
class UnaSusExerciseFiveQ2Answer(ScriptBaseModel):
    """Handles Exercise 2 Question two"""

    async def _fn(self):
        messages = self.value.messages
        if not messages:
            return
        message = messages[0]
        assert isinstance(message, NfmReplyMessage)
        contatcs = self.value.contacts
        if not contatcs:
            return
        contact = contatcs[0]
        wa_id = contact.wa_id
        user = await get_user(self.db_session, wa_id)

        response_json: dict = json.loads(message.interactive.nfm_reply.response_json)
        q2_answer = response_json.get("q2")

        match q2_answer:
            case "a":
                handler = UnaSusE5Q2A(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()
            case "b":
                handler = UnaSusE5Q2B(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()
            case "c":
                handler = UnaSusE5Q2C(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()
                user.exercise_grade_una["E5"][1] = 1  # type: ignore
                flag_modified(user, "exercise_grade_una")
                await self.db_session.commit()
            case "d":
                handler = UnaSusE5Q2D(
                    self.db_session, self.client_session, self.registery, self.value
                )
                await handler._fn()


@unasus_bp.register()
@unasus_doc.register()
class UnaSusE5Q2A(ScriptBaseModel):
    """Explains UnaSus Exercise 5 Question 2 Alternative A"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Incorreta*:\n\n"
            "A incompletude √© um problema a ser sanado, n√£o um crit√©rio para aumento de"
            "financiamento. O texto aponta a incompletude como uma lacuna."
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()


@unasus_bp.register()
@unasus_doc.register()
class UnaSusE5Q2B(ScriptBaseModel):
    """Explains UnaSus Exercise 5 Question 2 Alternative B"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Incorreta*:\n\n"
            "A incompletude, especialmente quando se marca 'ignorado', representa uma "
            "perda de informa√ß√£o e prejudica a qualidade e a representatividade dos dados. "
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()


@unasus_bp.register()
@unasus_doc.register()
class UnaSusE5Q2C(ScriptBaseModel):
    """Explains UnaSus Exercise 5 Question 2 Alternative C"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Correta*:\n\n"
            "A Unidade 5 conclui que 'Sem o adequado registro, √© imposs√≠vel "
            "planejar para adequada implementa√ß√£o da PNSIPN ou qualquer outra pol√≠tica p√∫blica "
            "que objetive reduzir as iniquidades √©tnico-raciais.' "
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()


@unasus_bp.register()
@unasus_doc.register()
class UnaSusE5Q2D(ScriptBaseModel):
    """Explains UnaSus Exercise 4 Question 2 Alternative D"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        message_content = (
            "*Alternativa Incorreta*:\n\n"
            "A aus√™ncia do dado ra√ßa/cor impede a an√°lise de desigualdades e o direcionamento "
            "de pol√≠ticas espec√≠ficas, n√£o simplificando a an√°lise de forma positiva, mas "
            "sim a tornando menos completa e menos capaz de identificar disparidades. "
        )

        message = TextMessage(to=wa_id, body_text=message_content)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()


# Check Exercises:
@unasus_bp.register()
@unasus_doc.register()
class UnaCheckCongratulations(ScriptBaseModel):
    """Checks if you have completed all exercises on unasus"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return
        contatc = contatcs[0]
        wa_id = contatc.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        chapters = user.chapter_grade_una
        chapter_map = {
            "C1": "Falta o cap√≠tulo 1.",
            "C2": "Falta o cap√≠tulo 2",
            "C3": "Falta o cap√≠tulo 3",
            "C4": "Falta o cap√≠tulo 4",
            "C5": "Falta o cap√≠tulo 5 ",
        }
        exercises = user.exercise_grade_una
        exercises_map = {
            "E1": (
                "Exercicio 1 Quest√£o 1, faltante.",
                "Exercicio 1 Quest√£o 2, faltante.",
            ),
            "E2": (
                "Exercicio 2 Quest√£o 1, faltante.",
                "Exercicio 2 Quest√£o 2, faltante.",
            ),
            "E3": (
                "Exercicio 3 Quest√£o 1, faltante.",
                "Exercicio 3 Quest√£o 2, faltante.",
            ),
            "E4": (
                "Exercicio 4 Quest√£o 1, faltante.",
                "Exercicio 4 Quest√£o 2, faltante.",
            ),
            "E5": (
                "Exercicio 5 Quest√£o 1, faltante.",
                "Exercicio 5 Quest√£o 2, faltante.",
            ),
        }

        give_congrats = True
        for key, value in chapters.items():
            if value == 0:
                give_congrats = False
                message_content = chapter_map.get(key)
                message = TextMessage(to=wa_id, body_text=message_content) # type: ignore
                await message.send(self.client_session)

        for ex_key, ex_grades_list in exercises.items():
            exercise_specific_messages = exercises_map.get(ex_key)
            for i, grade_value in enumerate(ex_grades_list):
                if grade_value == 0:
                    give_congrats = False
                    if i < len(exercise_specific_messages): # type: ignore
                        message_content = exercise_specific_messages[i] # type: ignore
                        message = TextMessage(to=wa_id, body_text=message_content)
                        await message.send(self.client_session)

        if give_congrats:
            message_content = "Parabens voc√™ completou toda essa se√ß√£o com exito!"
            message = TextMessage(to=wa_id, body_text=message_content)
            await message.send(self.client_session)

        self.next = "Redirecter"
        user.current_step = self.next
        await self.db_session.commit()


# --- Bibiograph
@unasus_doc.register()
@unasus_bp.register()
class UnaSusBib(ScriptBaseModel):
    """Bibliograph of una sus content"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return

        contatc = contatcs[0]
        wa_id = contatc.wa_id

        message = TemplateMessage(
            to=wa_id,
            template_name="mvp_unasus_bib_0",
            has_static_header=True,
            has_flow_button=True,
            flow_button_index="0",
            flow_token=self.__class__.__name__,
        )
        await message.send(client_session=self.client_session)

        self.next = "Redirecter"
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        user.current_step = self.next
        user.current_exercise_una = self.__class__.__name__
        await self.db_session.commit()


@unasus_bp.register()
class UnaSusBibHandle(ScriptBaseModel):
    """Bibliograph of una sus content"""

    async def _fn(self):
        self.jump = True
        messages = self.value.messages
        if not messages:
            return
        message = messages[0]
        assert isinstance(message, NfmReplyMessage)
        contatcs = self.value.contacts
        if not contatcs:
            return
        contact = contatcs[0]
        wa_id = contact.wa_id
        user = await get_user(self.db_session, wa_id)
        if not user:
            return
        
        response_json: dict = json.loads(message.interactive.nfm_reply.response_json)
        
        if response_json.get("denuncia_site"):
            handler = UnaSusDenunciaSite(self.db_session, self.client_session, self.registery, self.value)
            await handler._fn()
        if response_json.get("desigualdades_pdf"):
            handler = UnaSusDesiqualPdf(self.db_session, self.client_session, self.registery, self.value)
            await handler._fn()
        if response_json.get("destino_site"):
            handler = UnaSusDestinoSite(self.db_session, self.client_session, self.registery, self.value)
            await handler._fn()
        if response_json.get("politica_nacional_video"):
            handler = UnaSusPoliticaVideo(self.db_session, self.client_session, self.registery, self.value)
            await handler._fn()
        if response_json.get("diretos_humanos_pdf"):
            handler = UnaSusDireitosHumanosPdf(self.db_session, self.client_session, self.registery, self.value)
            await handler._fn()
        if response_json.get("racismo_estrutural_pdf"):
            handler = UnaSusRaciPdf(self.db_session, self.client_session, self.registery, self.value)
            await handler._fn()
        if response_json.get("guia_pdf"):
            handler = UnaSusGuiaPdf(self.db_session, self.client_session, self.registery, self.value)
            await handler._fn()
        if response_json.get("boletim_v1_site"):
            handler = UnaSusBoletimV1Site(self.db_session, self.client_session, self.registery, self.value)
            await handler._fn()
        if response_json.get("boletim_v2_site"):
            handler = UnaSusBoletimV2Site(self.db_session, self.client_session, self.registery, self.value)
            await handler._fn()
        if response_json.get("comunidades_pdf"):
            handler = UnaSusComunityPdf(self.db_session, self.client_session, self.registery, self.value)
            await handler._fn()
        
        
        user.current_step = "Redirecter"
        await self.db_session.commit()


@unasus_bp.register()
@unasus_doc.register()
class UnaSusRaciPdf(ScriptBaseModel):
    """Pdf for the Documento
    ALMEIDA, Silvio Lu√≠s. Racismo estrutural. Cole√ß√£o Feminismos Plurais. S√£o Paulo: Sueli Carneiro; P√≥len. Brasil 2011
    """

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return

        contatc = contatcs[0]
        wa_id = contatc.wa_id

        file_name = "Racismo estrutural.pdf"
        url = "https://fpabramo.org.br/csbh/wp-content/uploads/sites/3/2020/11/DOC_0013-2.pdf"
        message = DocumentMessage(to=wa_id, filename=file_name, link=url)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        user.current_step = self.next
        await self.db_session.commit()


@unasus_bp.register()
@unasus_doc.register()
class UnaSusGuiaPdf(ScriptBaseModel):
    """Pdf for the Documento
    BRASIL. Guia de implementacÃßaÃÉo do quesito RacÃßa/Cor/Etnia. Bras√≠lia: Universidade de BrasiÃÅlia, Minist√©rio da Sa√∫de, 2018.
    """

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return

        contatc = contatcs[0]
        wa_id = contatc.wa_id

        file_name = "Guia de implementacÃßaÃÉo.pdf"
        url = "http://bvsms.saude.gov.br/bvs/publicacoes/guia_implementacao_raca_cor_etnia.pdf"
        message = DocumentMessage(to=wa_id, filename=file_name, link=url)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        user.current_step = self.next
        await self.db_session.commit()


@unasus_bp.register()
@unasus_doc.register()
class UnaSusBoletimV1Site(ScriptBaseModel):
    """Link for the siteBoletim Epidemiol√≥gico Especial. Sa√∫de da Popula√ß√£o Negra, Volume 1"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return

        contatc = contatcs[0]
        wa_id = contatc.wa_id

        header = "Boletim Epidemiol√≥gico Especial"
        body_text = " Sa√∫de da Popula√ß√£o Negra, Volume 1"
        display_text = "Visitar"
        url = "https://www.gov.br/saude/pt-br/centrais-de-conteudo/publicacoes/boletins/epidemiologicos/especiais/2023/boletim-epidemiologico-saude-da-populacao-negra-numero-especial-vol-1-out.2023"
        message = CTAUrlButtonMessage(
            to=wa_id, display_text=display_text, body_text=body_text, url=url
        )
        message.add_header(header)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        user.current_step = self.next
        await self.db_session.commit()


@unasus_bp.register()
@unasus_doc.register()
class UnaSusBoletimV2Site(ScriptBaseModel):
    """Link for the siteBoletim Epidemiol√≥gico Especial. Sa√∫de da Popula√ß√£o Negra, Volume 2"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return

        contatc = contatcs[0]
        wa_id = contatc.wa_id

        header = "Boletim Epidemiol√≥gico Especial"
        body_text = "Sa√∫de da Popula√ß√£o Negra, Volume 2."
        display_text = "Visitar"
        url = "https://www.gov.br/saude/pt-br/centrais-de-conteudo/publicacoes/boletins/epidemiologicos/especiais/2023/boletim-epidemiologico-saude-da-populacao-negra-numero-especial-vol-2-out.2023"
        message = CTAUrlButtonMessage(
            to=wa_id, display_text=display_text, body_text=body_text, url=url
        )
        message.add_header(header)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        user.current_step = self.next
        await self.db_session.commit()


@unasus_bp.register()
@unasus_doc.register()
class UnaSusComunityPdf(ScriptBaseModel):
    """Pdf for the Documento
    Vulnerabilidade Hist√≥rica e Futura das Comunidades Quilombolas do Par√° em Tempo de Pandemia.
    """

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return

        contatc = contatcs[0]
        wa_id = contatc.wa_id

        file_name = "Comunidades Quilombolas.pdf"
        url = "https://malungu.org/wp-content/uploads/2021/11/Vulnerabilidade...-digital.pdf"
        message = DocumentMessage(to=wa_id, filename=file_name, link=url)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        user.current_step = self.next
        await self.db_session.commit()


@unasus_bp.register()
@unasus_doc.register()
class UnaSusDenunciaSite(ScriptBaseModel):
    """Link for the site Den√∫ncia do CNS e CNDH √† ONU mostra que negros morreram cinco vezes mais de Covid-19 que brancos."""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return

        contatc = contatcs[0]
        wa_id = contatc.wa_id

        header = "Den√∫ncia do CNS e CNDH √† ONU"
        body_text = "mostra que negros morreram cinco vezes mais de Covid-19 que brancos. Portal do CNS. Publicado em 26 de novembro de 2021."
        display_text = "Visitar"
        url = "https://conselho.saude.gov.br/ultimas-noticias-cns/2211-denuncia-do-cns-e-cndh-a-onu-mostra-que-negros-morreram-cinco-vezes-mais-de-covid-19-que-brancos"
        message = CTAUrlButtonMessage(
            to=wa_id, display_text=display_text, body_text=body_text, url=url
        )
        message.add_header(header)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        user.current_step = self.next
        await self.db_session.commit()


@unasus_bp.register()
@unasus_doc.register()
class UnaSusDesiqualPdf(ScriptBaseModel):
    """Pdf for the Documento
    Desigualdades Raciais e Covid-19. O que a pandemia encontra no Brasil.
    """

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return

        contatc = contatcs[0]
        wa_id = contatc.wa_id

        file_name = " Desigualdades Raciais.pdf"
        url = "https://cebrap.org.br/wp-content/uploads/2020/11/Afro_Informativo-1_final_-2.pdf"
        message = DocumentMessage(to=wa_id, filename=file_name, link=url)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        user.current_step = self.next
        await self.db_session.commit()


@unasus_bp.register()
@unasus_doc.register()
class UnaSusDestinoSite(ScriptBaseModel):
    """Link for the site Den√∫ncia do CNS e CNDH √† ONU mostra que negros morreram cinco vezes mais de Covid-19 que brancos."""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return

        contatc = contatcs[0]
        wa_id = contatc.wa_id

        header = "O Destino dos negros ap√≥s a aboli√ß√£o"
        body_text = ". Instituto de Pesquisa Econ√¥mica Aplicada - IPEA. Ed. 70, 29/12/2011. Ano 8, 2011"
        display_text = "Visitar"
        url = "https://www.ipea.gov.br/desafios/index.php?option=com_content&id=2673%3Acatid%3D28"
        message = CTAUrlButtonMessage(
            to=wa_id, display_text=display_text, body_text=body_text, url=url
        )
        message.add_header(header)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        user.current_step = self.next
        await self.db_session.commit()


@unasus_bp.register()
@unasus_doc.register()
class UnaSusPoliticaVideo(ScriptBaseModel):
    """Link for the video Como implementar a Pol√≠tica Nacional de Sa√∫de Integral da Popula√ß√£o Negra no seu munic√≠pio?"""

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return

        contatc = contatcs[0]
        wa_id = contatc.wa_id

        header = "Como implementar "
        body_text = "a Pol√≠tica Nacional de Sa√∫de Integral da Popula√ß√£o Negra no seu munic√≠pio? Sociedade Brasileira de Medicina de Fam√≠lia e Comunidade, 2023"
        display_text = "Assistir"
        url = "https://www.youtube.com/watch?v=VQrocnNtpHo"
        message = CTAUrlButtonMessage(
            to=wa_id, display_text=display_text, body_text=body_text, url=url
        )
        message.add_header(header)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        user.current_step = self.next
        await self.db_session.commit()

@unasus_bp.register()
@unasus_doc.register()
class UnaSusDireitosHumanosPdf(ScriptBaseModel):
    """Pdf for the Documento
    Desigualdades Raciais e Covid-19. O que a pandemia encontra no Brasil.
    """

    async def _fn(self):
        contatcs = self.value.contacts
        if not contatcs:
            return

        contatc = contatcs[0]
        wa_id = contatc.wa_id

        file_name = "Direitos Humanos.pdf"
        url = "https://www.social.org.br/images/pdf/direitos_humanos_2021.pdf"
        message = DocumentMessage(to=wa_id, filename=file_name, link=url)
        await message.send(self.client_session)

        self.next = "Redirecter"
        user = await get_user(self.db_session, wa_id)
        if not user:
            return

        user.current_step = self.next
        await self.db_session.commit()